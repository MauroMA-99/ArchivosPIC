

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu May 19 00:36:45 2022

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  007D94                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _display7a
    58  007D94  C0                 	db	192
    59  007D95  F9                 	db	249
    60  007D96  A4                 	db	164
    61  007D97  B0                 	db	176
    62  007D98  99                 	db	153
    63  007D99  92                 	db	146
    64  007D9A  82                 	db	130
    65  007D9B  F8                 	db	248
    66  007D9C  80                 	db	128
    67  007D9D  90                 	db	144
    68  0000                     _LATD	set	3980
    69  0000                     _LATE	set	3981
    70  0000                     _TRISE	set	3990
    71  0000                     _TRISD	set	3989
    72  0000                     _OSCCON	set	4051
    73  0000                     _ADCON1	set	4033
    74                           
    75                           ; #config settings
    76                           
    77                           	psect	cinit
    78  007D9E                     __pcinit:
    79                           	callstack 0
    80  007D9E                     start_initialization:
    81                           	callstack 0
    82  007D9E                     __initialization:
    83                           	callstack 0
    84                           
    85                           ; Initialize objects allocated to COMRAM (10 bytes)
    86                           ; load TBLPTR registers with __pidataCOMRAM
    87  007D9E  0E94               	movlw	low __pidataCOMRAM
    88  007DA0  6EF6               	movwf	tblptrl,c
    89  007DA2  0E7D               	movlw	high __pidataCOMRAM
    90  007DA4  6EF7               	movwf	tblptrh,c
    91  007DA6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    92  007DA8  6EF8               	movwf	tblptru,c
    93  007DAA  EE00  F00F         	lfsr	0,__pdataCOMRAM
    94  007DAE  EE10 F00A          	lfsr	1,10
    95  007DB2                     copy_data0:
    96  007DB2  0009               	tblrd		*+
    97  007DB4  CFF5 FFEE          	movff	tablat,postinc0
    98  007DB8  50E5               	movf	postdec1,w,c
    99  007DBA  50E1               	movf	fsr1l,w,c
   100  007DBC  E1FA               	bnz	copy_data0
   101  007DBE                     end_of_initialization:
   102                           	callstack 0
   103  007DBE                     __end_of__initialization:
   104                           	callstack 0
   105  007DBE  0100               	movlb	0
   106  007DC0  EFE2  F03E         	goto	_main	;jump to C main() function
   107                           
   108                           	psect	dataCOMRAM
   109  00000F                     __pdataCOMRAM:
   110                           	callstack 0
   111  00000F                     _display7a:
   112                           	callstack 0
   113  00000F                     	ds	10
   114                           
   115                           	psect	cstackCOMRAM
   116  000001                     __pcstackCOMRAM:
   117                           	callstack 0
   118  000001                     ?___awdiv:
   119                           	callstack 0
   120  000001                     ?___awmod:
   121                           	callstack 0
   122  000001                     ___awdiv@dividend:
   123                           	callstack 0
   124  000001                     ___awmod@dividend:
   125                           	callstack 0
   126                           
   127                           ; 2 bytes @ 0x0
   128  000001                     	ds	2
   129  000003                     ___awdiv@divisor:
   130                           	callstack 0
   131  000003                     ___awmod@divisor:
   132                           	callstack 0
   133                           
   134                           ; 2 bytes @ 0x2
   135  000003                     	ds	2
   136  000005                     ___awdiv@counter:
   137                           	callstack 0
   138  000005                     ___awmod@counter:
   139                           	callstack 0
   140                           
   141                           ; 1 bytes @ 0x4
   142  000005                     	ds	1
   143  000006                     ___awdiv@sign:
   144                           	callstack 0
   145  000006                     ___awmod@sign:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x5
   149  000006                     	ds	1
   150  000007                     ___awdiv@quotient:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x6
   154  000007                     	ds	2
   155  000009                     ??_mostrarDisplay:
   156                           
   157                           ; 1 bytes @ 0x8
   158  000009                     	ds	1
   159  00000A                     mostrarDisplay@uni:
   160                           	callstack 0
   161                           
   162                           ; 1 bytes @ 0x9
   163  00000A                     	ds	1
   164  00000B                     mostrarDisplay@dec:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0xA
   168  00000B                     	ds	1
   169  00000C                     mostrarDisplay@numero:
   170                           	callstack 0
   171                           
   172                           ; 1 bytes @ 0xB
   173  00000C                     	ds	1
   174  00000D                     mostrarDisplay@j:
   175                           	callstack 0
   176                           
   177                           ; 1 bytes @ 0xC
   178  00000D                     	ds	1
   179  00000E                     main@cuenta:
   180                           	callstack 0
   181                           
   182                           ; 1 bytes @ 0xD
   183  00000E                     	ds	1
   184                           
   185 ;;
   186 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   187 ;;
   188 ;; *************** function _main *****************
   189 ;; Defined at:
   190 ;;		line 6 in file "main.c"
   191 ;; Parameters:    Size  Location     Type
   192 ;;		None
   193 ;; Auto vars:     Size  Location     Type
   194 ;;  cuenta          1   13[COMRAM] unsigned char 
   195 ;; Return value:  Size  Location     Type
   196 ;;                  2   18[None  ] int 
   197 ;; Registers used:
   198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   199 ;; Tracked objects:
   200 ;;		On entry : 0/0
   201 ;;		On exit  : 0/0
   202 ;;		Unchanged: 0/0
   203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   204 ;;      Params:         0       0       0       0       0       0       0       0       0
   205 ;;      Locals:         1       0       0       0       0       0       0       0       0
   206 ;;      Temps:          0       0       0       0       0       0       0       0       0
   207 ;;      Totals:         1       0       0       0       0       0       0       0       0
   208 ;;Total ram usage:        1 bytes
   209 ;; Hardware stack levels required when called:    2
   210 ;; This function calls:
   211 ;;		_mostrarDisplay
   212 ;; This function is called by:
   213 ;;		Startup code after reset
   214 ;; This function uses a non-reentrant model
   215 ;;
   216                           
   217                           	psect	text0
   218  007DC4                     __ptext0:
   219                           	callstack 0
   220  007DC4                     _main:
   221                           	callstack 29
   222  007DC4                     
   223                           ;main.c: 8:     uint8_t cuenta=0;
   224  007DC4  0E00               	movlw	0
   225  007DC6  6E0E               	movwf	main@cuenta^0,c
   226                           
   227                           ;main.c: 9:     ADCON1=0x0F;
   228  007DC8  0E0F               	movlw	15
   229  007DCA  6EC1               	movwf	193,c	;volatile
   230                           
   231                           ;main.c: 10:     OSCCON=0x72;
   232  007DCC  0E72               	movlw	114
   233  007DCE  6ED3               	movwf	211,c	;volatile
   234                           
   235                           ;main.c: 11:     TRISD = 0;
   236  007DD0  0E00               	movlw	0
   237  007DD2  6E95               	movwf	149,c	;volatile
   238  007DD4                     
   239                           ;main.c: 13:     TRISE &=~ ((1<<0)|(1<<1));
   240  007DD4  0EFC               	movlw	252
   241  007DD6  1696               	andwf	150,f,c	;volatile
   242  007DD8                     
   243                           ;main.c: 15:     LATE |= ((1<<0)|(1<<1));
   244  007DD8  0E03               	movlw	3
   245  007DDA  128D               	iorwf	141,f,c	;volatile
   246  007DDC                     l940:
   247                           
   248                           ;main.c: 19:         mostrarDisplay(cuenta);
   249  007DDC  500E               	movf	main@cuenta^0,w,c
   250  007DDE  EC01  F03F         	call	_mostrarDisplay
   251  007DE2                     
   252                           ;main.c: 20:         cuenta++;
   253  007DE2  2A0E               	incf	main@cuenta^0,f,c
   254  007DE4                     
   255                           ;main.c: 22:         if(cuenta==15){
   256  007DE4  0E0F               	movlw	15
   257  007DE6  180E               	xorwf	main@cuenta^0,w,c
   258  007DE8  A4D8               	btfss	status,2,c
   259  007DEA  EFF9  F03E         	goto	u281
   260  007DEE  EFFB  F03E         	goto	u280
   261  007DF2                     u281:
   262  007DF2  EFEE  F03E         	goto	l940
   263  007DF6                     u280:
   264  007DF6                     
   265                           ;main.c: 23:             cuenta=0;
   266  007DF6  0E00               	movlw	0
   267  007DF8  6E0E               	movwf	main@cuenta^0,c
   268  007DFA  EFEE  F03E         	goto	l940
   269  007DFE  EF00  F000         	goto	start
   270  007E02                     __end_of_main:
   271                           	callstack 0
   272                           
   273 ;; *************** function _mostrarDisplay *****************
   274 ;; Defined at:
   275 ;;		line 2 in file "Display_mult.c"
   276 ;; Parameters:    Size  Location     Type
   277 ;;  numero          1    wreg     unsigned char 
   278 ;; Auto vars:     Size  Location     Type
   279 ;;  numero          1   11[COMRAM] unsigned char 
   280 ;;  j               1   12[COMRAM] unsigned char 
   281 ;;  dec             1   10[COMRAM] unsigned char 
   282 ;;  uni             1    9[COMRAM] unsigned char 
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 0/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   292 ;;      Params:         0       0       0       0       0       0       0       0       0
   293 ;;      Locals:         4       0       0       0       0       0       0       0       0
   294 ;;      Temps:          1       0       0       0       0       0       0       0       0
   295 ;;      Totals:         5       0       0       0       0       0       0       0       0
   296 ;;Total ram usage:        5 bytes
   297 ;; Hardware stack levels used:    1
   298 ;; Hardware stack levels required when called:    1
   299 ;; This function calls:
   300 ;;		___awdiv
   301 ;;		___awmod
   302 ;; This function is called by:
   303 ;;		_main
   304 ;; This function uses a non-reentrant model
   305 ;;
   306                           
   307                           	psect	text1
   308  007E02                     __ptext1:
   309                           	callstack 0
   310  007E02                     _mostrarDisplay:
   311                           	callstack 29
   312                           
   313                           ;incstack = 0
   314                           ;mostrarDisplay@numero stored from wreg
   315  007E02  6E0C               	movwf	mostrarDisplay@numero^0,c
   316  007E04                     
   317                           ;Display_mult.c: 4:     uint8_t uni,dec,j;;Display_mult.c: 5:     uni=numero%10;
   318  007E04  C00C  F001         	movff	mostrarDisplay@numero,___awmod@dividend
   319  007E08  6A02               	clrf	(___awmod@dividend+1)^0,c
   320  007E0A  0E00               	movlw	0
   321  007E0C  6E04               	movwf	(___awmod@divisor+1)^0,c
   322  007E0E  0E0A               	movlw	10
   323  007E10  6E03               	movwf	___awmod@divisor^0,c
   324  007E12  EC46  F03F         	call	___awmod	;wreg free
   325  007E16  5001               	movf	?___awmod^0,w,c
   326  007E18  6E0A               	movwf	mostrarDisplay@uni^0,c
   327                           
   328                           ;Display_mult.c: 6:     dec=numero/10;
   329  007E1A  C00C  F001         	movff	mostrarDisplay@numero,___awdiv@dividend
   330  007E1E  6A02               	clrf	(___awdiv@dividend+1)^0,c
   331  007E20  0E00               	movlw	0
   332  007E22  6E04               	movwf	(___awdiv@divisor+1)^0,c
   333  007E24  0E0A               	movlw	10
   334  007E26  6E03               	movwf	___awdiv@divisor^0,c
   335  007E28  EC9E  F03F         	call	___awdiv	;wreg free
   336  007E2C  5001               	movf	?___awdiv^0,w,c
   337  007E2E  6E0B               	movwf	mostrarDisplay@dec^0,c
   338  007E30                     
   339                           ;Display_mult.c: 8:     for(j=0;j<200;j++){
   340  007E30  0E00               	movlw	0
   341  007E32  6E0D               	movwf	mostrarDisplay@j^0,c
   342  007E34                     l918:
   343                           
   344                           ;Display_mult.c: 10:         LATD = display7a[uni];
   345  007E34  0E0F               	movlw	low _display7a
   346  007E36  240A               	addwf	mostrarDisplay@uni^0,w,c
   347  007E38  6ED9               	movwf	fsr2l,c
   348  007E3A  6ADA               	clrf	fsr2h,c
   349  007E3C  0E00               	movlw	high _display7a
   350  007E3E  22DA               	addwfc	fsr2h,f,c
   351  007E40  50DF               	movf	indf2,w,c
   352  007E42  6E8C               	movwf	140,c	;volatile
   353  007E44                     
   354                           ;Display_mult.c: 12:         LATE &=~ (1<<1);
   355  007E44  928D               	bcf	141,1,c	;volatile
   356  007E46                     
   357                           ;Display_mult.c: 13:         _delay((unsigned long)((1)*(8000000/4000.0)));
   358  007E46  0E03               	movlw	3
   359  007E48  6E09               	movwf	??_mostrarDisplay^0,c
   360  007E4A  0E98               	movlw	152
   361  007E4C                     u297:
   362  007E4C  2EE8               	decfsz	wreg,f,c
   363  007E4E  D7FE               	bra	u297
   364  007E50  2E09               	decfsz	??_mostrarDisplay^0,f,c
   365  007E52  D7FC               	bra	u297
   366  007E54                     
   367                           ;Display_mult.c: 15:         LATE |= (1<<1);
   368  007E54  828D               	bsf	141,1,c	;volatile
   369  007E56                     
   370                           ;Display_mult.c: 17:         LATD=display7a[dec];
   371  007E56  0E0F               	movlw	low _display7a
   372  007E58  240B               	addwf	mostrarDisplay@dec^0,w,c
   373  007E5A  6ED9               	movwf	fsr2l,c
   374  007E5C  6ADA               	clrf	fsr2h,c
   375  007E5E  0E00               	movlw	high _display7a
   376  007E60  22DA               	addwfc	fsr2h,f,c
   377  007E62  50DF               	movf	indf2,w,c
   378  007E64  6E8C               	movwf	140,c	;volatile
   379  007E66                     
   380                           ;Display_mult.c: 19:         LATE &=~(1<<0);
   381  007E66  908D               	bcf	141,0,c	;volatile
   382  007E68                     
   383                           ;Display_mult.c: 20:         _delay((unsigned long)((1)*(8000000/4000.0)));
   384  007E68  0E03               	movlw	3
   385  007E6A  6E09               	movwf	??_mostrarDisplay^0,c
   386  007E6C  0E98               	movlw	152
   387  007E6E                     u307:
   388  007E6E  2EE8               	decfsz	wreg,f,c
   389  007E70  D7FE               	bra	u307
   390  007E72  2E09               	decfsz	??_mostrarDisplay^0,f,c
   391  007E74  D7FC               	bra	u307
   392                           
   393                           ;Display_mult.c: 22:         LATE |= (1<<0);
   394  007E76  808D               	bsf	141,0,c	;volatile
   395                           
   396                           ;Display_mult.c: 23:     }
   397  007E78  2A0D               	incf	mostrarDisplay@j^0,f,c
   398  007E7A  0EC7               	movlw	199
   399  007E7C  640D               	cpfsgt	mostrarDisplay@j^0,c
   400  007E7E  EF43  F03F         	goto	u271
   401  007E82  EF45  F03F         	goto	u270
   402  007E86                     u271:
   403  007E86  EF1A  F03F         	goto	l918
   404  007E8A                     u270:
   405  007E8A  0012               	return		;funcret
   406  007E8C                     __end_of_mostrarDisplay:
   407                           	callstack 0
   408                           
   409 ;; *************** function ___awmod *****************
   410 ;; Defined at:
   411 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\awmod.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;  dividend        2    0[COMRAM] int 
   414 ;;  divisor         2    2[COMRAM] int 
   415 ;; Auto vars:     Size  Location     Type
   416 ;;  sign            1    5[COMRAM] unsigned char 
   417 ;;  counter         1    4[COMRAM] unsigned char 
   418 ;; Return value:  Size  Location     Type
   419 ;;                  2    0[COMRAM] int 
   420 ;; Registers used:
   421 ;;		wreg, status,2, status,0
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   427 ;;      Params:         4       0       0       0       0       0       0       0       0
   428 ;;      Locals:         2       0       0       0       0       0       0       0       0
   429 ;;      Temps:          0       0       0       0       0       0       0       0       0
   430 ;;      Totals:         6       0       0       0       0       0       0       0       0
   431 ;;Total ram usage:        6 bytes
   432 ;; Hardware stack levels used:    1
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_mostrarDisplay
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           	psect	text2
   441  007E8C                     __ptext2:
   442                           	callstack 0
   443  007E8C                     ___awmod:
   444                           	callstack 29
   445  007E8C  0E00               	movlw	0
   446  007E8E  6E06               	movwf	___awmod@sign^0,c
   447  007E90  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   448  007E92  EF4F  F03F         	goto	u210
   449  007E96  EF4D  F03F         	goto	u211
   450  007E9A                     u211:
   451  007E9A  EF55  F03F         	goto	l882
   452  007E9E                     u210:
   453  007E9E  6C01               	negf	___awmod@dividend^0,c
   454  007EA0  1E02               	comf	(___awmod@dividend+1)^0,f,c
   455  007EA2  B0D8               	btfsc	status,0,c
   456  007EA4  2A02               	incf	(___awmod@dividend+1)^0,f,c
   457  007EA6  0E01               	movlw	1
   458  007EA8  6E06               	movwf	___awmod@sign^0,c
   459  007EAA                     l882:
   460  007EAA  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   461  007EAC  EF5C  F03F         	goto	u220
   462  007EB0  EF5A  F03F         	goto	u221
   463  007EB4                     u221:
   464  007EB4  EF60  F03F         	goto	l886
   465  007EB8                     u220:
   466  007EB8  6C03               	negf	___awmod@divisor^0,c
   467  007EBA  1E04               	comf	(___awmod@divisor+1)^0,f,c
   468  007EBC  B0D8               	btfsc	status,0,c
   469  007EBE  2A04               	incf	(___awmod@divisor+1)^0,f,c
   470  007EC0                     l886:
   471  007EC0  5003               	movf	___awmod@divisor^0,w,c
   472  007EC2  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   473  007EC4  B4D8               	btfsc	status,2,c
   474  007EC6  EF67  F03F         	goto	u231
   475  007ECA  EF69  F03F         	goto	u230
   476  007ECE                     u231:
   477  007ECE  EF8D  F03F         	goto	l902
   478  007ED2                     u230:
   479  007ED2  0E01               	movlw	1
   480  007ED4  6E05               	movwf	___awmod@counter^0,c
   481  007ED6  EF71  F03F         	goto	l892
   482  007EDA                     l890:
   483  007EDA  90D8               	bcf	status,0,c
   484  007EDC  3603               	rlcf	___awmod@divisor^0,f,c
   485  007EDE  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   486  007EE0  2A05               	incf	___awmod@counter^0,f,c
   487  007EE2                     l892:
   488  007EE2  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   489  007EE4  EF76  F03F         	goto	u241
   490  007EE8  EF78  F03F         	goto	u240
   491  007EEC                     u241:
   492  007EEC  EF6D  F03F         	goto	l890
   493  007EF0                     u240:
   494  007EF0                     l894:
   495  007EF0  5003               	movf	___awmod@divisor^0,w,c
   496  007EF2  5C01               	subwf	___awmod@dividend^0,w,c
   497  007EF4  5004               	movf	(___awmod@divisor+1)^0,w,c
   498  007EF6  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   499  007EF8  A0D8               	btfss	status,0,c
   500  007EFA  EF81  F03F         	goto	u251
   501  007EFE  EF83  F03F         	goto	u250
   502  007F02                     u251:
   503  007F02  EF87  F03F         	goto	l898
   504  007F06                     u250:
   505  007F06  5003               	movf	___awmod@divisor^0,w,c
   506  007F08  5E01               	subwf	___awmod@dividend^0,f,c
   507  007F0A  5004               	movf	(___awmod@divisor+1)^0,w,c
   508  007F0C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   509  007F0E                     l898:
   510  007F0E  90D8               	bcf	status,0,c
   511  007F10  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   512  007F12  3203               	rrcf	___awmod@divisor^0,f,c
   513  007F14  2E05               	decfsz	___awmod@counter^0,f,c
   514  007F16  EF78  F03F         	goto	l894
   515  007F1A                     l902:
   516  007F1A  5006               	movf	___awmod@sign^0,w,c
   517  007F1C  B4D8               	btfsc	status,2,c
   518  007F1E  EF93  F03F         	goto	u261
   519  007F22  EF95  F03F         	goto	u260
   520  007F26                     u261:
   521  007F26  EF99  F03F         	goto	l906
   522  007F2A                     u260:
   523  007F2A  6C01               	negf	___awmod@dividend^0,c
   524  007F2C  1E02               	comf	(___awmod@dividend+1)^0,f,c
   525  007F2E  B0D8               	btfsc	status,0,c
   526  007F30  2A02               	incf	(___awmod@dividend+1)^0,f,c
   527  007F32                     l906:
   528  007F32  C001  F001         	movff	___awmod@dividend,?___awmod
   529  007F36  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   530  007F3A  0012               	return		;funcret
   531  007F3C                     __end_of___awmod:
   532                           	callstack 0
   533                           
   534 ;; *************** function ___awdiv *****************
   535 ;; Defined at:
   536 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\awdiv.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  dividend        2    0[COMRAM] int 
   539 ;;  divisor         2    2[COMRAM] int 
   540 ;; Auto vars:     Size  Location     Type
   541 ;;  quotient        2    6[COMRAM] int 
   542 ;;  sign            1    5[COMRAM] unsigned char 
   543 ;;  counter         1    4[COMRAM] unsigned char 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  2    0[COMRAM] int 
   546 ;; Registers used:
   547 ;;		wreg, status,2, status,0
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   553 ;;      Params:         4       0       0       0       0       0       0       0       0
   554 ;;      Locals:         4       0       0       0       0       0       0       0       0
   555 ;;      Temps:          0       0       0       0       0       0       0       0       0
   556 ;;      Totals:         8       0       0       0       0       0       0       0       0
   557 ;;Total ram usage:        8 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; This function calls:
   560 ;;		Nothing
   561 ;; This function is called by:
   562 ;;		_mostrarDisplay
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text3
   567  007F3C                     __ptext3:
   568                           	callstack 0
   569  007F3C                     ___awdiv:
   570                           	callstack 29
   571  007F3C  0E00               	movlw	0
   572  007F3E  6E06               	movwf	___awdiv@sign^0,c
   573  007F40  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   574  007F42  EFA7  F03F         	goto	u150
   575  007F46  EFA5  F03F         	goto	u151
   576  007F4A                     u151:
   577  007F4A  EFAD  F03F         	goto	l838
   578  007F4E                     u150:
   579  007F4E  6C03               	negf	___awdiv@divisor^0,c
   580  007F50  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   581  007F52  B0D8               	btfsc	status,0,c
   582  007F54  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   583  007F56  0E01               	movlw	1
   584  007F58  6E06               	movwf	___awdiv@sign^0,c
   585  007F5A                     l838:
   586  007F5A  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   587  007F5C  EFB4  F03F         	goto	u160
   588  007F60  EFB2  F03F         	goto	u161
   589  007F64                     u161:
   590  007F64  EFBA  F03F         	goto	l844
   591  007F68                     u160:
   592  007F68  6C01               	negf	___awdiv@dividend^0,c
   593  007F6A  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   594  007F6C  B0D8               	btfsc	status,0,c
   595  007F6E  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   596  007F70  0E01               	movlw	1
   597  007F72  1A06               	xorwf	___awdiv@sign^0,f,c
   598  007F74                     l844:
   599  007F74  0E00               	movlw	0
   600  007F76  6E08               	movwf	(___awdiv@quotient+1)^0,c
   601  007F78  0E00               	movlw	0
   602  007F7A  6E07               	movwf	___awdiv@quotient^0,c
   603  007F7C  5003               	movf	___awdiv@divisor^0,w,c
   604  007F7E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   605  007F80  B4D8               	btfsc	status,2,c
   606  007F82  EFC5  F03F         	goto	u171
   607  007F86  EFC7  F03F         	goto	u170
   608  007F8A                     u171:
   609  007F8A  EFEF  F03F         	goto	l866
   610  007F8E                     u170:
   611  007F8E  0E01               	movlw	1
   612  007F90  6E05               	movwf	___awdiv@counter^0,c
   613  007F92  EFCF  F03F         	goto	l852
   614  007F96                     l850:
   615  007F96  90D8               	bcf	status,0,c
   616  007F98  3603               	rlcf	___awdiv@divisor^0,f,c
   617  007F9A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   618  007F9C  2A05               	incf	___awdiv@counter^0,f,c
   619  007F9E                     l852:
   620  007F9E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   621  007FA0  EFD4  F03F         	goto	u181
   622  007FA4  EFD6  F03F         	goto	u180
   623  007FA8                     u181:
   624  007FA8  EFCB  F03F         	goto	l850
   625  007FAC                     u180:
   626  007FAC                     l854:
   627  007FAC  90D8               	bcf	status,0,c
   628  007FAE  3607               	rlcf	___awdiv@quotient^0,f,c
   629  007FB0  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   630  007FB2  5003               	movf	___awdiv@divisor^0,w,c
   631  007FB4  5C01               	subwf	___awdiv@dividend^0,w,c
   632  007FB6  5004               	movf	(___awdiv@divisor+1)^0,w,c
   633  007FB8  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   634  007FBA  A0D8               	btfss	status,0,c
   635  007FBC  EFE2  F03F         	goto	u191
   636  007FC0  EFE4  F03F         	goto	u190
   637  007FC4                     u191:
   638  007FC4  EFE9  F03F         	goto	l862
   639  007FC8                     u190:
   640  007FC8  5003               	movf	___awdiv@divisor^0,w,c
   641  007FCA  5E01               	subwf	___awdiv@dividend^0,f,c
   642  007FCC  5004               	movf	(___awdiv@divisor+1)^0,w,c
   643  007FCE  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   644  007FD0  8007               	bsf	___awdiv@quotient^0,0,c
   645  007FD2                     l862:
   646  007FD2  90D8               	bcf	status,0,c
   647  007FD4  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   648  007FD6  3203               	rrcf	___awdiv@divisor^0,f,c
   649  007FD8  2E05               	decfsz	___awdiv@counter^0,f,c
   650  007FDA  EFD6  F03F         	goto	l854
   651  007FDE                     l866:
   652  007FDE  5006               	movf	___awdiv@sign^0,w,c
   653  007FE0  B4D8               	btfsc	status,2,c
   654  007FE2  EFF5  F03F         	goto	u201
   655  007FE6  EFF7  F03F         	goto	u200
   656  007FEA                     u201:
   657  007FEA  EFFB  F03F         	goto	l870
   658  007FEE                     u200:
   659  007FEE  6C07               	negf	___awdiv@quotient^0,c
   660  007FF0  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   661  007FF2  B0D8               	btfsc	status,0,c
   662  007FF4  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   663  007FF6                     l870:
   664  007FF6  C007  F001         	movff	___awdiv@quotient,?___awdiv
   665  007FFA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   666  007FFE  0012               	return		;funcret
   667  008000                     __end_of___awdiv:
   668                           	callstack 0
   669  0000                     
   670                           	psect	rparam
   671  0000                     
   672                           	psect	idloc
   673                           
   674                           ;Config register IDLOC0 @ 0x200000
   675                           ;	unspecified, using default values
   676  200000                     	org	2097152
   677  200000  FF                 	db	255
   678                           
   679                           ;Config register IDLOC1 @ 0x200001
   680                           ;	unspecified, using default values
   681  200001                     	org	2097153
   682  200001  FF                 	db	255
   683                           
   684                           ;Config register IDLOC2 @ 0x200002
   685                           ;	unspecified, using default values
   686  200002                     	org	2097154
   687  200002  FF                 	db	255
   688                           
   689                           ;Config register IDLOC3 @ 0x200003
   690                           ;	unspecified, using default values
   691  200003                     	org	2097155
   692  200003  FF                 	db	255
   693                           
   694                           ;Config register IDLOC4 @ 0x200004
   695                           ;	unspecified, using default values
   696  200004                     	org	2097156
   697  200004  FF                 	db	255
   698                           
   699                           ;Config register IDLOC5 @ 0x200005
   700                           ;	unspecified, using default values
   701  200005                     	org	2097157
   702  200005  FF                 	db	255
   703                           
   704                           ;Config register IDLOC6 @ 0x200006
   705                           ;	unspecified, using default values
   706  200006                     	org	2097158
   707  200006  FF                 	db	255
   708                           
   709                           ;Config register IDLOC7 @ 0x200007
   710                           ;	unspecified, using default values
   711  200007                     	org	2097159
   712  200007  FF                 	db	255
   713                           
   714                           	psect	config
   715                           
   716                           ;Config register CONFIG1L @ 0x300000
   717                           ;	PLL Prescaler Selection bits
   718                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   719                           ;	System Clock Postscaler Selection bits
   720                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   721                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   722                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   723  300000                     	org	3145728
   724  300000  00                 	db	0
   725                           
   726                           ;Config register CONFIG1H @ 0x300001
   727                           ;	Oscillator Selection bits
   728                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
   729                           ;	Fail-Safe Clock Monitor Enable bit
   730                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   731                           ;	Internal/External Oscillator Switchover bit
   732                           ;	IESO = OFF, Oscillator Switchover mode disabled
   733  300001                     	org	3145729
   734  300001  08                 	db	8
   735                           
   736                           ;Config register CONFIG2L @ 0x300002
   737                           ;	Power-up Timer Enable bit
   738                           ;	PWRT = OFF, PWRT disabled
   739                           ;	Brown-out Reset Enable bits
   740                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   741                           ;	Brown-out Reset Voltage bits
   742                           ;	BORV = 3, Minimum setting 2.05V
   743                           ;	USB Voltage Regulator Enable bit
   744                           ;	VREGEN = OFF, USB voltage regulator disabled
   745  300002                     	org	3145730
   746  300002  1F                 	db	31
   747                           
   748                           ;Config register CONFIG2H @ 0x300003
   749                           ;	Watchdog Timer Enable bit
   750                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   751                           ;	Watchdog Timer Postscale Select bits
   752                           ;	WDTPS = 32768, 1:32768
   753  300003                     	org	3145731
   754  300003  1E                 	db	30
   755                           
   756                           ; Padding undefined space
   757  300004                     	org	3145732
   758  300004  FF                 	db	255
   759                           
   760                           ;Config register CONFIG3H @ 0x300005
   761                           ;	CCP2 MUX bit
   762                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   763                           ;	PORTB A/D Enable bit
   764                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   765                           ;	Low-Power Timer 1 Oscillator Enable bit
   766                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   767                           ;	MCLR Pin Enable bit
   768                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
   769  300005                     	org	3145733
   770  300005  01                 	db	1
   771                           
   772                           ;Config register CONFIG4L @ 0x300006
   773                           ;	Stack Full/Underflow Reset Enable bit
   774                           ;	STVREN = ON, Stack full/underflow will cause Reset
   775                           ;	Single-Supply ICSP Enable bit
   776                           ;	LVP = OFF, Single-Supply ICSP disabled
   777                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   778                           ;	ICPRT = OFF, ICPORT disabled
   779                           ;	Extended Instruction Set Enable bit
   780                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   781                           ;	Background Debugger Enable bit
   782                           ;	DEBUG = 0x1, unprogrammed default
   783  300006                     	org	3145734
   784  300006  81                 	db	129
   785                           
   786                           ; Padding undefined space
   787  300007                     	org	3145735
   788  300007  FF                 	db	255
   789                           
   790                           ;Config register CONFIG5L @ 0x300008
   791                           ;	Code Protection bit
   792                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   793                           ;	Code Protection bit
   794                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   795                           ;	Code Protection bit
   796                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   797                           ;	Code Protection bit
   798                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   799  300008                     	org	3145736
   800  300008  0F                 	db	15
   801                           
   802                           ;Config register CONFIG5H @ 0x300009
   803                           ;	Boot Block Code Protection bit
   804                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   805                           ;	Data EEPROM Code Protection bit
   806                           ;	CPD = OFF, Data EEPROM is not code-protected
   807  300009                     	org	3145737
   808  300009  C0                 	db	192
   809                           
   810                           ;Config register CONFIG6L @ 0x30000A
   811                           ;	Write Protection bit
   812                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   813                           ;	Write Protection bit
   814                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   815                           ;	Write Protection bit
   816                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   817                           ;	Write Protection bit
   818                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   819  30000A                     	org	3145738
   820  30000A  0F                 	db	15
   821                           
   822                           ;Config register CONFIG6H @ 0x30000B
   823                           ;	Configuration Register Write Protection bit
   824                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   825                           ;	Boot Block Write Protection bit
   826                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   827                           ;	Data EEPROM Write Protection bit
   828                           ;	WRTD = OFF, Data EEPROM is not write-protected
   829  30000B                     	org	3145739
   830  30000B  E0                 	db	224
   831                           
   832                           ;Config register CONFIG7L @ 0x30000C
   833                           ;	Table Read Protection bit
   834                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   835                           ;	Table Read Protection bit
   836                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   837                           ;	Table Read Protection bit
   838                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   839                           ;	Table Read Protection bit
   840                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   841  30000C                     	org	3145740
   842  30000C  0F                 	db	15
   843                           
   844                           ;Config register CONFIG7H @ 0x30000D
   845                           ;	Boot Block Table Read Protection bit
   846                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   847  30000D                     	org	3145741
   848  30000D  40                 	db	64
   849                           tosu	equ	0xFFF
   850                           tosh	equ	0xFFE
   851                           tosl	equ	0xFFD
   852                           stkptr	equ	0xFFC
   853                           pclatu	equ	0xFFB
   854                           pclath	equ	0xFFA
   855                           pcl	equ	0xFF9
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           prodh	equ	0xFF4
   861                           prodl	equ	0xFF3
   862                           indf0	equ	0xFEF
   863                           postinc0	equ	0xFEE
   864                           postdec0	equ	0xFED
   865                           preinc0	equ	0xFEC
   866                           plusw0	equ	0xFEB
   867                           fsr0h	equ	0xFEA
   868                           fsr0l	equ	0xFE9
   869                           wreg	equ	0xFE8
   870                           indf1	equ	0xFE7
   871                           postinc1	equ	0xFE6
   872                           postdec1	equ	0xFE5
   873                           preinc1	equ	0xFE4
   874                           plusw1	equ	0xFE3
   875                           fsr1h	equ	0xFE2
   876                           fsr1l	equ	0xFE1
   877                           bsr	equ	0xFE0
   878                           indf2	equ	0xFDF
   879                           postinc2	equ	0xFDE
   880                           postdec2	equ	0xFDD
   881                           preinc2	equ	0xFDC
   882                           plusw2	equ	0xFDB
   883                           fsr2h	equ	0xFDA
   884                           fsr2l	equ	0xFD9
   885                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_mostrarDisplay
    _mostrarDisplay->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1083
                                             13 COMRAM     1     1      0
                     _mostrarDisplay
 ---------------------------------------------------------------------------------
 (1) _mostrarDisplay                                       5     5      0    1036
                                              8 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _mostrarDisplay
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      18       1       25.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu May 19 00:36:45 2022

                     l36 7E8A             ___awdiv@sign 0006                      l270 7FFE  
                    l283 7F3A                      l900 7F14                      l830 7F3C  
                    l902 7F1A                      l910 7E04                      l840 7F68  
                    l832 7F40                      l904 7F2A                      l920 7E44  
                    l912 7E30                      l850 7F96                      l842 7F70  
                    l834 7F4E                      l906 7F32                      l930 7E68  
                    l922 7E46                      l860 7FD0                      l852 7F9E  
                    l844 7F74                      l836 7F56                      l932 7E7A  
                    l924 7E54                      l940 7DDC                      l870 7FF6  
                    l862 7FD2                      l854 7FAC                      l846 7F7C  
                    l838 7F5A                      l926 7E56                      l918 7E34  
                    l942 7DE2                      l934 7DC4                      l864 7FD8  
                    l856 7FB2                      l848 7F8E                      l880 7EA6  
                    l928 7E66                      l944 7DE4                      l936 7DD4  
                    l858 7FC8                      l866 7FDE                      l890 7EDA  
                    l882 7EAA                      l874 7E8C                      l946 7DF6  
                    l938 7DD8                      l868 7FEE                      l892 7EE2  
                    l884 7EB8                      l876 7E90                      l894 7EF0  
                    l886 7EC0                      l878 7E9E                      l896 7F06  
                    l888 7ED2                      l898 7F0E                      u200 7FEE  
                    u201 7FEA                      u210 7E9E                      u211 7E9A  
                    u220 7EB8                      u221 7EB4                      u150 7F4E  
                    u230 7ED2                      u151 7F4A                      u231 7ECE  
                    u160 7F68                      u240 7EF0                      u161 7F64  
                    u241 7EEC                      u170 7F8E                      u250 7F06  
                    u171 7F8A                      u251 7F02                      u307 7E6E  
                    u180 7FAC                      u260 7F2A                      u181 7FA8  
                    u261 7F26                      u190 7FC8                      u270 7E8A  
                    u191 7FC4                      u271 7E86                      u280 7DF6  
                    u281 7DF2                      u297 7E4C             ___awmod@sign 0006  
                    wreg 000FE8         ??_mostrarDisplay 0009                     _LATD 000F8C  
                   _LATE 000F8D                     _main 7DC4                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv 8000  
        __end_of___awmod 7F3C          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _TRISD 000F95                    _TRISE 000F96                    tablat 000FF5  
                  status 000FD8          __initialization 7D9E             __end_of_main 7E02  
                 ??_main 000E            __activetblptr 000000                   _ADCON1 000FC1  
       ___awdiv@dividend 0001                   _OSCCON 000FD3                ??___awdiv 0005  
              ??___awmod 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
        ___awmod@counter 0005             __pdataCOMRAM 000F                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 7DBE            ___rparam_used 000001           __pcstackCOMRAM 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7F3C  
                ___awmod 7E8C                  __pcinit 7D9E                  __ramtop 0800  
                __ptext0 7DC4                  __ptext1 7E02                  __ptext2 7E8C  
                __ptext3 7F3C         ___awmod@dividend 0001     end_of_initialization 7DBE  
__size_of_mostrarDisplay 008A                  postdec1 000FE5                  postinc0 000FEE  
             main@cuenta 000E            __pidataCOMRAM 7D94      start_initialization 7D9E  
         _mostrarDisplay 7E02                 ?___awdiv 0001                 ?___awmod 0001  
              _display7a 000F   __end_of_mostrarDisplay 7E8C          mostrarDisplay@j 000D  
              copy_data0 7DB2          ?_mostrarDisplay 0001                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 00C4         __size_of___awmod 00B0  
          __size_of_main 003E     mostrarDisplay@numero 000C        mostrarDisplay@dec 000B  
      mostrarDisplay@uni 000A  
